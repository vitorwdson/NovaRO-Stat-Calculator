{"version":3,"sources":["config/classes.ts","config/thresholds.ts","App.tsx","index.tsx"],"names":["classes","name","transcended","jobBonuses","str","agi","vit","int","dex","luk","thresholds","level","points","App","useState","setPoints","maxPoints","setMaxPoints","jobBonus","setJobBonus","isTranscended","setTranscended","maxStats","setMaxStats","setStr","setAgi","setVit","setInt","setDex","setLuk","calculateCost","current","goal","cost","c","Math","floor","abs","nextCost","stat","useEffect","newPoints","className","htmlFor","id","onChange","e","classIndex","parseInt","target","value","map","cl","i","th","baby","min","type","max","onClick","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yJAmPeA,EAnPC,CACd,CACEC,KAAM,cACNC,aAAa,EACbC,WAAY,CACVC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,GACLC,IAAK,EACLC,IAAK,IAGT,CACER,KAAM,cACNC,aAAa,EACbC,WAAY,CACVC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,GACLC,IAAK,EACLC,IAAK,IAGT,CACER,KAAM,UACNC,aAAa,EACbC,WAAY,CACVC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,GACLC,IAAK,EACLC,IAAK,IAGT,CACER,KAAM,WACNC,aAAa,EACbC,WAAY,CACVC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,GACLC,IAAK,EACLC,IAAK,IAGT,CACER,KAAM,SACNC,aAAa,EACbC,WAAY,CACVC,IAAK,EACLC,IAAK,GACLC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,IAGT,CACER,KAAM,WACNC,aAAa,EACbC,WAAY,CACVC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,GACLC,IAAK,IAGT,CACER,KAAM,WACNC,aAAa,EACbC,WAAY,CACVC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,IAGT,CACER,KAAM,WACNC,aAAa,EACbC,WAAY,CACVC,IAAK,GACLC,IAAK,EACLC,IAAK,GACLC,IAAK,EACLC,IAAK,EACLC,IAAK,IAGT,CACER,KAAM,aACNC,aAAa,EACbC,WAAY,CACVC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,GACLC,IAAK,EACLC,IAAK,IAGT,CACER,KAAM,mBACNC,aAAa,EACbC,WAAY,CACVC,IAAK,EACLC,IAAK,GACLC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,IAGT,CACER,KAAM,gBACNC,aAAa,EACbC,WAAY,CACVC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,IAGT,CACER,KAAM,cACNC,aAAa,EACbC,WAAY,CA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","file":"static/js/main.72f23094.chunk.js","sourcesContent":["const classes = [\r\n  {\r\n    name: 'Rune Knight',\r\n    transcended: true,\r\n    jobBonuses: {\r\n      str: 6,\r\n      agi: 6,\r\n      vit: 7,\r\n      int: 10,\r\n      dex: 9,\r\n      luk: 5,\r\n    },\r\n  },\r\n  {\r\n    name: 'Royal Guard',\r\n    transcended: true,\r\n    jobBonuses: {\r\n      str: 9,\r\n      agi: 3,\r\n      vit: 9,\r\n      int: 10,\r\n      dex: 9,\r\n      luk: 3,\r\n    },\r\n  },\r\n  {\r\n    name: 'Warlock',\r\n    transcended: true,\r\n    jobBonuses: {\r\n      str: 1,\r\n      agi: 7,\r\n      vit: 8,\r\n      int: 15,\r\n      dex: 8,\r\n      luk: 4,\r\n    },\r\n  },\r\n  {\r\n    name: 'Sorcerer',\r\n    transcended: true,\r\n    jobBonuses: {\r\n      str: 4,\r\n      agi: 4,\r\n      vit: 8,\r\n      int: 13,\r\n      dex: 9,\r\n      luk: 5,\r\n    },\r\n  },\r\n  {\r\n    name: 'Ranger',\r\n    transcended: true,\r\n    jobBonuses: {\r\n      str: 2,\r\n      agi: 12,\r\n      vit: 8,\r\n      int: 9,\r\n      dex: 8,\r\n      luk: 4,\r\n    },\r\n  },\r\n  {\r\n    name: 'Minstrel',\r\n    transcended: true,\r\n    jobBonuses: {\r\n      str: 7,\r\n      agi: 7,\r\n      vit: 7,\r\n      int: 9,\r\n      dex: 10,\r\n      luk: 3,\r\n    },\r\n  },\r\n  {\r\n    name: 'Wanderer',\r\n    transcended: true,\r\n    jobBonuses: {\r\n      str: 7,\r\n      agi: 9,\r\n      vit: 7,\r\n      int: 9,\r\n      dex: 9,\r\n      luk: 2,\r\n    },\r\n  },\r\n  {\r\n    name: 'Mechanic',\r\n    transcended: true,\r\n    jobBonuses: {\r\n      str: 10,\r\n      agi: 6,\r\n      vit: 10,\r\n      int: 6,\r\n      dex: 5,\r\n      luk: 6,\r\n    },\r\n  },\r\n  {\r\n    name: 'Geneticist',\r\n    transcended: true,\r\n    jobBonuses: {\r\n      str: 5,\r\n      agi: 6,\r\n      vit: 8,\r\n      int: 12,\r\n      dex: 8,\r\n      luk: 4,\r\n    },\r\n  },\r\n  {\r\n    name: 'Guillotine Cross',\r\n    transcended: true,\r\n    jobBonuses: {\r\n      str: 8,\r\n      agi: 11,\r\n      vit: 6,\r\n      int: 5,\r\n      dex: 9,\r\n      luk: 4,\r\n    },\r\n  },\r\n  {\r\n    name: 'Shadow Chaser',\r\n    transcended: true,\r\n    jobBonuses: {\r\n      str: 8,\r\n      agi: 9,\r\n      vit: 8,\r\n      int: 6,\r\n      dex: 6,\r\n      luk: 6,\r\n    },\r\n  },\r\n  {\r\n    name: 'Arch Bishop',\r\n    transcended: true,\r\n    jobBonuses: {\r\n      str: 6,\r\n      agi: 7,\r\n      vit: 7,\r\n      int: 12,\r\n      dex: 7,\r\n      luk: 4,\r\n    },\r\n  },\r\n  {\r\n    name: 'Sura',\r\n    transcended: true,\r\n    jobBonuses: {\r\n      str: 10,\r\n      agi: 10,\r\n      vit: 6,\r\n      int: 8,\r\n      dex: 8,\r\n      luk: 1,\r\n    },\r\n  },\r\n  {\r\n    name: 'Soul Reaper',\r\n    transcended: false,\r\n    jobBonuses: {\r\n      str: 3,\r\n      agi: 7,\r\n      vit: 7,\r\n      int: 11,\r\n      dex: 13,\r\n      luk: 2,\r\n    },\r\n  },\r\n  {\r\n    name: 'Star Emperor',\r\n    transcended: false,\r\n    jobBonuses: {\r\n      str: 12,\r\n      agi: 10,\r\n      vit: 6,\r\n      int: 3,\r\n      dex: 9,\r\n      luk: 3,\r\n    },\r\n  },\r\n  {\r\n    name: 'Kagerou',\r\n    transcended: false,\r\n    jobBonuses: {\r\n      str: 7,\r\n      agi: 10,\r\n      vit: 6,\r\n      int: 6,\r\n      dex: 9,\r\n      luk: 5,\r\n    },\r\n  },\r\n  {\r\n    name: 'Oboro',\r\n    transcended: false,\r\n    jobBonuses: {\r\n      str: 7,\r\n      agi: 10,\r\n      vit: 6,\r\n      int: 6,\r\n      dex: 8,\r\n      luk: 6,\r\n    },\r\n  },\r\n  {\r\n    name: 'Rebellion',\r\n    transcended: false,\r\n    jobBonuses: {\r\n      str: 3,\r\n      agi: 8,\r\n      vit: 6,\r\n      int: 8,\r\n      dex: 11,\r\n      luk: 7,\r\n    },\r\n  },\r\n  {\r\n    name: 'Super Novice',\r\n    transcended: false,\r\n    jobBonuses: {\r\n      str: 7,\r\n      agi: 7,\r\n      vit: 6,\r\n      int: 6,\r\n      dex: 6,\r\n      luk: 5,\r\n    },\r\n  },\r\n  {\r\n    name: 'Summoner',\r\n    transcended: false,\r\n    jobBonuses: {\r\n      str: 0,\r\n      agi: 7,\r\n      vit: 5,\r\n      int: 9,\r\n      dex: 12,\r\n      luk: 5,\r\n    },\r\n  },\r\n]\r\n\r\nexport default classes","const thresholds = [\r\n  {\r\n    level: 200,\r\n    points: 4150,\r\n  },\r\n  {\r\n    level: 170,\r\n    points: 3176,\r\n  },\r\n  {\r\n    level: 130,\r\n    points: 2067,\r\n  },\r\n  {\r\n    level: 100,\r\n    points: 1347,\r\n  },\r\n]\r\n\r\nexport default thresholds","import { useState, useEffect } from 'react'\nimport classes from './config/classes'\nimport thresholds from './config/thresholds'\nimport './App.css'\n\nfunction App() {\n  // Initializing the necessary States\n  const [points, setPoints] = useState(0)\n  const [maxPoints, setMaxPoints] = useState(thresholds[0].points)\n  const [jobBonus, setJobBonus] = useState(classes[0].jobBonuses)\n  const [isTranscended, setTranscended] = useState(true)\n  const [maxStats, setMaxStats] = useState(130)\n  const [str, setStr] = useState(1)\n  const [agi, setAgi] = useState(1)\n  const [vit, setVit] = useState(1)\n  const [int, setInt] = useState(1)\n  const [dex, setDex] = useState(1)\n  const [luk, setLuk] = useState(1)\n\n  // Defines the effect to update the available stat points\n  useEffect(() => {\n    // Initializes the new points variable with the amount based on the\n    let newPoints = maxPoints\n\n    // Checks if the character is trancended and, if so, subtract 52 points\n    if (isTranscended)\n      newPoints -= 52\n    \n    // Subtract the cost related to the amount of STR from the available points\n    newPoints -= calculateCost(1, str)\n    // Subtract the cost related to the amount of AGI from the available points\n    newPoints -= calculateCost(1, agi)\n    // Subtract the cost related to the amount of VIT from the available points\n    newPoints -= calculateCost(1, vit)\n    // Subtract the cost related to the amount of INT from the available points\n    newPoints -= calculateCost(1, int)\n    // Subtract the cost related to the amount of DEX from the available points\n    newPoints -= calculateCost(1, dex)\n    // Subtract the cost related to the amount of LUK from the available points\n    newPoints -= calculateCost(1, luk)\n\n    // Updates the amount of available stat points\n    setPoints(newPoints)\n  }, [maxPoints, isTranscended, str, agi, vit, int, dex, luk])\n\n  // Function to calculate the cost to increase from current to goal\n  function calculateCost(current: number, goal: number) {\n    // Initializes the cost variable\n    let cost = 0\n\n    // Loop through the range between current and goal using the variable c\n    for (let c = current; c < goal; c++) {\n      if (c <= 99) {\n        // If c is lower or equal than 99, use the formula: floor(x-1)/10+2\n        cost += Math.floor((c - 1) / 10) + 2\n      } else {\n        // If c is greater than 99, use the formula: floor(abs(x-100))/5+16\n        cost += 4 * Math.floor(Math.abs(c - 100) / 5) + 16\n      }\n    }\n\n    return cost\n  }\n\n  // Function to calculate the cost for the next increase\n  function nextCost(stat: number) {\n    // Checks if the stat is already maxed and returns '-' or the cost calculated\n    return stat === maxStats ? '-' : calculateCost(stat, stat + 1)\n  }\n\n  // Function to handle the onChange event for the isBaby selector\n  function babyOnChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    // Checks if the value selected was 'Yes'\n    const baby = e.target.value === 'yes'\n\n    // Updates tehe maximum amount of stats according to the value selected\n    setMaxStats(baby ? 117 : 130)\n\n    // If the value selected was 'Yes', update all stats to it or the limit\n    if (baby) {\n      setStr(Math.min(str, 117))\n      setAgi(Math.min(agi, 117))\n      setVit(Math.min(vit, 117))\n      setInt(Math.min(int, 117))\n      setDex(Math.min(dex, 117))\n      setLuk(Math.min(luk, 117))\n    }\n  }\n\n  // Function to handle the onChange event for the level selector\n  function levelOnChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    // Get the selected value and convert it to Int\n    const points = parseInt(e.target.value)\n\n    // Update the max points based on the level selected\n    setMaxPoints(points)\n  }\n\n  // Function to handle the onChange event for the class selector\n  function classOnChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    // Get the selected value and convert it to Int\n    const classIndex = parseInt(e.target.value)\n\n    // Update the trancended status based on the class selected\n    setTranscended(classes[classIndex].transcended)\n    // Update the job bonus stats based on the class selected\n    setJobBonus(classes[classIndex].jobBonuses)\n  }\n\n  // Function to handle the onChange event for the str input\n  function strOnChange(e: React.ChangeEvent<HTMLInputElement>) {\n    // Get the selected value and convert it to Int\n    const value = parseInt(e.target.value)\n    // Update the str value limited between 1 and maxStats\n    setStr(Math.min(Math.max(value, 1), maxStats))\n  }\n\n  // Function to handle the onChange event for the agi input\n  function agiOnChange(e: React.ChangeEvent<HTMLInputElement>) {\n    // Get the selected value and convert it to Int\n    const value = parseInt(e.target.value)\n    // Update the agi value limited between 1 and maxStats\n    setAgi(Math.min(Math.max(value, 1), maxStats))\n  }\n\n  // Function to handle the onChange event for the vit input\n  function vitOnChange(e: React.ChangeEvent<HTMLInputElement>) {\n    // Get the selected value and convert it to Int\n    const value = parseInt(e.target.value)\n    // Update the vit value limited between 1 and maxStats\n    setVit(Math.min(Math.max(value, 1), maxStats))\n  }\n\n  // Function to handle the onChange event for the int input\n  function intOnChange(e: React.ChangeEvent<HTMLInputElement>) {\n    // Get the selected value and convert it to Int\n    const value = parseInt(e.target.value)\n    // Update the int value limited between 1 and maxStats\n    setInt(Math.min(Math.max(value, 1), maxStats))\n  }\n\n  // Function to handle the onChange event for the dex input\n  function dexOnChange(e: React.ChangeEvent<HTMLInputElement>) {\n    // Get the selected value and convert it to Int\n    const value = parseInt(e.target.value)\n    // Update the dex value limited between 1 and maxStats\n    setDex(Math.min(Math.max(value, 1), maxStats))\n  }\n\n  // Function to handle the onChange event for the luk input\n  function lukOnChange(e: React.ChangeEvent<HTMLInputElement>) {\n    // Get the selected value and convert it to Int\n    const value = parseInt(e.target.value)\n    // Update the luk value limited between 1 and maxStats\n    setLuk(Math.min(Math.max(value, 1), maxStats))\n  }\n\n  return (\n    <div className=\"box\">\n      <h1>STAT CALCULATOR</h1>\n\n      <div className=\"row\">\n\n        <div className=\"col s60\">\n          <label htmlFor=\"classSelector\">Choose your Class:</label>\n          <select id=\"classSelector\" onChange={classOnChange}>\n            {\n              classes.map((cl, i) => (\n                <option value={i} key={cl.name}>{cl.name}</option>\n              ))\n            }\n          </select>\n        </div>\n\n        <div className=\"col s20\">\n          <label htmlFor=\"levelelector\">Level:</label>\n          <select id=\"levelelector\" onChange={levelOnChange}>\n            {\n              thresholds.map(th => (\n                <option value={th.points} key={th.level}>{th.level}</option>\n              ))\n            }\n          </select>\n        </div>\n\n        <div className=\"col s20\">\n          <label htmlFor=\"babyelector\">Baby?:</label>\n          <select id=\"babySelector\" onChange={babyOnChange}>\n              <option value=\"no\">No</option>\n              <option value=\"yes\">Yes</option>\n          </select>\n        </div>\n\n      </div>\n\n      <br />\n\n      <div className=\"row\">\n        <div className=\"col s50 align-top\">\n\n          <div className=\"row\">\n            <div className=\"col s25\">\n              <label htmlFor=\"strStatInput\">STR:</label>\n            </div>\n            <div className=\"col s75 stat-input-group\">\n              <input type=\"number\" min=\"1\" value={str} max={maxStats} id=\"strStatInput\" onChange={strOnChange} />\n              <button className=\"subtract\" onClick={() => setStr(Math.max(str - 1, 1))}>◀</button>\n              <button className=\"add\" onClick={() => setStr(Math.min(str + 1, maxStats))}>▶</button>\n              <span className=\"job-bonus\"> +{jobBonus.str}</span>\n              <span className=\"add-cost\">{nextCost(str)}</span>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col s25\">\n              <label htmlFor=\"agiStatInput\">AGI:</label>\n            </div>\n            <div className=\"col s75 stat-input-group\">\n              <input type=\"number\" min=\"1\" value={agi} max={maxStats} id=\"agiStatInput\" onChange={agiOnChange} />\n              <button className=\"subtract\" onClick={() => setAgi(Math.max(agi - 1, 1))}>◀</button>\n              <button className=\"add\" onClick={() => setAgi(Math.min(agi + 1, maxStats))}>▶</button>\n              <span className=\"job-bonus\"> +{jobBonus.agi}</span>\n              <span className=\"add-cost\">{nextCost(agi) }</span>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col s25\">\n              <label htmlFor=\"vitStatInput\">VIT:</label>\n            </div>\n            <div className=\"col s75 stat-input-group\">\n              <input type=\"number\" min=\"1\" value={vit} max={maxStats} id=\"vitStatInput\" onChange={vitOnChange} />\n              <button className=\"subtract\" onClick={() => setVit(Math.max(vit - 1, 1))}>◀</button>\n              <button className=\"add\" onClick={() => setVit(Math.min(vit + 1, maxStats))}>▶</button>\n              <span className=\"job-bonus\"> +{jobBonus.vit}</span>\n              <span className=\"add-cost\">{nextCost(vit) }</span>\n            </div>\n          </div>\n\n        </div>\n        <div className=\"col s50\">\n\n          <div className=\"row\">\n            <div className=\"col s25\">\n              <label htmlFor=\"intStatInput\">INT:</label>\n            </div>\n            <div className=\"col s75 stat-input-group\">\n              <input type=\"number\" min=\"1\" value={int} max={maxStats} id=\"intStatInput\" onChange={intOnChange} />\n              <button className=\"subtract\" onClick={() => setInt(Math.max(int - 1, 1))}>◀</button>\n              <button className=\"add\" onClick={() => setInt(Math.min(int + 1, maxStats))}>▶</button>\n              <span className=\"job-bonus\"> +{jobBonus.int}</span>\n              <span className=\"add-cost\">{nextCost(int) }</span>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col s25\">\n              <label htmlFor=\"dexStatInput\">DEX:</label>\n            </div>\n            <div className=\"col s75 stat-input-group\">\n              <input type=\"number\" min=\"1\" value={dex} max={maxStats} id=\"dexStatInput\" onChange={dexOnChange} />\n              <button className=\"subtract\" onClick={() => setDex(Math.max(dex - 1, 1))}>◀</button>\n              <button className=\"add\" onClick={() => setDex(Math.min(dex + 1, maxStats))}>▶</button>\n              <span className=\"job-bonus\"> +{jobBonus.dex}</span>\n              <span className=\"add-cost\">{nextCost(dex) }</span>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col s25\">\n              <label htmlFor=\"lukStatInput\">LUK:</label>\n            </div>\n            <div className=\"col s75 stat-input-group\">\n              <input type=\"number\" min=\"1\" value={luk} max={maxStats} id=\"lukStatInput\" onChange={lukOnChange} />\n              <button className=\"subtract\" onClick={() => setLuk(Math.max(luk - 1, 1))}>◀</button>\n              <button className=\"add\" onClick={() => setLuk(Math.min(luk + 1, maxStats))}>▶</button>\n              <span className=\"job-bonus\"> +{jobBonus.luk}</span>\n              <span className=\"add-cost\">{nextCost(luk) }</span>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col s60\">\n              <label htmlFor=\"statPoints\">Available points:</label>\n            </div>\n            <div className=\"col s40\">\n              <input type=\"text\" value={points} disabled />\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}